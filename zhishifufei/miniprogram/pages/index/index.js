"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = require("../../utils/util");
Page({
    data: {
        motto: 'Hello World',
        userInfo: {},
        hasUserInfo: false,
        canIUse: wx.canIUse('button.open-type.getUserInfo'),
        canIUseGetUserProfile: false,
        lunboList: [],
        speed: 30,
        color: '#807C7C',
        page: 1,
        list: [],
        load: "上拉加载更多",
        canIUseOpenData: wx.canIUse('open-data.type.userAvatarUrl') && wx.canIUse('open-data.type.userNickName')
    },
    bindViewTap: function () {
        wx.navigateTo({
            url: '../logs/logs',
        });
    },
    onLoad: function () {
        if (wx.getUserProfile) {
            this.setData({
                canIUseGetUserProfile: true
            });
        }
        util_1.config();
        this.lunbo();
        this.all(this.data.page);
    },
    getUserProfile: function () {
        var _this = this;
        wx.getUserProfile({
            desc: '展示用户信息',
            success: function (res) {
                console.log(res);
                _this.setData({
                    userInfo: res.userInfo,
                    hasUserInfo: true
                });
            }
        });
    },
    getUserInfo: function (e) {
        console.log(e);
        this.setData({
            userInfo: e.detail.userInfo,
            hasUserInfo: true
        });
    },
    lunbo: function () {
        var root = this;
        util_1.get("lunbo", function (response) {
            root.setData({
                lunboList: response.data,
            });
        });
    },
    all: function (page) {
        var root = this;
        util_1.post("all", { page: page }, function (response) {
            console.log("all", response.data);
            if (page === 1) {
                root.setData({
                    list: response.data,
                    page: root.data.page + 1,
                    load: response.data.length > 0 ? '上拉加载更多' : '~~·我是有底线的人·~~'
                });
            }
            else {
                root.setData({
                    list: root.data.list.concat(response.data),
                    page: root.data.page + 1,
                    load: response.data.length > 0 ? '上拉加载更多' : '~~·我是有底线的人·~~'
                });
            }
        });
    },
    onReachBottom: function () {
        this.all(this.data.page);
    },
    openWin: function (e) {
        wx.navigateTo({
            url: "/pages/details/details?tid=" + e.currentTarget.dataset.id + "&title=" + e.currentTarget.dataset.title
        });
    },
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUVBLHlDQUFtRDtBQUVuRCxJQUFJLENBQUM7SUFDSCxJQUFJLEVBQUU7UUFDSixLQUFLLEVBQUUsYUFBYTtRQUNwQixRQUFRLEVBQUUsRUFBRTtRQUNaLFdBQVcsRUFBRSxLQUFLO1FBQ2xCLE9BQU8sRUFBRSxFQUFFLENBQUMsT0FBTyxDQUFDLDhCQUE4QixDQUFDO1FBQ25ELHFCQUFxQixFQUFFLEtBQUs7UUFDNUIsU0FBUyxFQUFFLEVBQUU7UUFDYixLQUFLLEVBQUMsRUFBRTtRQUNSLEtBQUssRUFBQyxTQUFTO1FBQ2YsSUFBSSxFQUFFLENBQUM7UUFDUCxJQUFJLEVBQUMsRUFBRTtRQUNQLElBQUksRUFBRSxRQUFRO1FBQ2QsZUFBZSxFQUFFLEVBQUUsQ0FBQyxPQUFPLENBQUMsOEJBQThCLENBQUMsSUFBSSxFQUFFLENBQUMsT0FBTyxDQUFDLDZCQUE2QixDQUFDO0tBQ3pHO0lBRUQsV0FBVztRQUNULEVBQUUsQ0FBQyxVQUFVLENBQUM7WUFDWixHQUFHLEVBQUUsY0FBYztTQUNwQixDQUFDLENBQUE7SUFDSixDQUFDO0lBQ0QsTUFBTTtRQUVKLElBQUksRUFBRSxDQUFDLGNBQWMsRUFBRTtZQUNyQixJQUFJLENBQUMsT0FBTyxDQUFDO2dCQUNYLHFCQUFxQixFQUFFLElBQUk7YUFDNUIsQ0FBQyxDQUFBO1NBQ0g7UUFDRCxhQUFNLEVBQUUsQ0FBQztRQUNULElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUNiLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUMzQixDQUFDO0lBQ0QsY0FBYztRQUFkLGlCQVlDO1FBVkMsRUFBRSxDQUFDLGNBQWMsQ0FBQztZQUNoQixJQUFJLEVBQUUsUUFBUTtZQUNkLE9BQU8sRUFBRSxVQUFDLEdBQUc7Z0JBQ1gsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQTtnQkFDaEIsS0FBSSxDQUFDLE9BQU8sQ0FBQztvQkFDWCxRQUFRLEVBQUUsR0FBRyxDQUFDLFFBQVE7b0JBQ3RCLFdBQVcsRUFBRSxJQUFJO2lCQUNsQixDQUFDLENBQUE7WUFDSixDQUFDO1NBQ0YsQ0FBQyxDQUFBO0lBQ0osQ0FBQztJQUNELFdBQVcsRUFBWCxVQUFZLENBQU07UUFFaEIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQTtRQUNkLElBQUksQ0FBQyxPQUFPLENBQUM7WUFDWCxRQUFRLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxRQUFRO1lBQzNCLFdBQVcsRUFBRSxJQUFJO1NBQ2xCLENBQUMsQ0FBQTtJQUNKLENBQUM7SUFDRCxLQUFLLEVBQUM7UUFDSixJQUFNLElBQUksR0FBRyxJQUFJLENBQUM7UUFDbEIsVUFBRyxDQUFDLE9BQU8sRUFBQyxVQUFBLFFBQVE7WUFDbEIsSUFBSSxDQUFDLE9BQU8sQ0FBQztnQkFDWCxTQUFTLEVBQUUsUUFBUSxDQUFDLElBQUk7YUFDekIsQ0FBQyxDQUFDO1FBQ0wsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBQ0QsR0FBRyxFQUFDLFVBQVUsSUFBWTtRQUN4QixJQUFNLElBQUksR0FBRyxJQUFJLENBQUM7UUFDbEIsV0FBSSxDQUFDLEtBQUssRUFBQyxFQUFDLElBQUksTUFBQSxFQUFDLEVBQUMsVUFBQSxRQUFRO1lBQ3hCLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUNqQyxJQUFHLElBQUksS0FBRyxDQUFDLEVBQUM7Z0JBQ1YsSUFBSSxDQUFDLE9BQU8sQ0FBQztvQkFDWCxJQUFJLEVBQUUsUUFBUSxDQUFDLElBQUk7b0JBQ25CLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksR0FBQyxDQUFDO29CQUN0QixJQUFJLEVBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUMsQ0FBQyxDQUFBLENBQUMsQ0FBQSxRQUFRLENBQUEsQ0FBQyxDQUFBLGVBQWU7aUJBQ3JELENBQUMsQ0FBQzthQUNKO2lCQUFJO2dCQUNILElBQUksQ0FBQyxPQUFPLENBQUM7b0JBQ1gsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDO29CQUMxQyxJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEdBQUMsQ0FBQztvQkFDdEIsSUFBSSxFQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFDLENBQUMsQ0FBQSxDQUFDLENBQUEsUUFBUSxDQUFBLENBQUMsQ0FBQSxlQUFlO2lCQUNyRCxDQUFDLENBQUM7YUFDSjtRQUNILENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUNELGFBQWEsRUFBQztRQUNaLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUMzQixDQUFDO0lBRUQsT0FBTyxFQUFFLFVBQVMsQ0FBc0Q7UUFDdEUsRUFBRSxDQUFDLFVBQVUsQ0FBQztZQUNaLEdBQUcsRUFBRSw2QkFBNkIsR0FBRyxDQUFDLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxFQUFFLEdBQUcsU0FBUyxHQUFHLENBQUMsQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLEtBQUs7U0FDNUcsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztDQUNGLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbIi8vIGluZGV4LnRzXG4vLyDojrflj5blupTnlKjlrp7kvotcbmltcG9ydCB7Y29uZmlnLCBnZXQsIHBvc3R9IGZyb20gXCIuLi8uLi91dGlscy91dGlsXCI7XG5cblBhZ2Uoe1xuICBkYXRhOiB7XG4gICAgbW90dG86ICdIZWxsbyBXb3JsZCcsXG4gICAgdXNlckluZm86IHt9LFxuICAgIGhhc1VzZXJJbmZvOiBmYWxzZSxcbiAgICBjYW5JVXNlOiB3eC5jYW5JVXNlKCdidXR0b24ub3Blbi10eXBlLmdldFVzZXJJbmZvJyksXG4gICAgY2FuSVVzZUdldFVzZXJQcm9maWxlOiBmYWxzZSxcbiAgICBsdW5ib0xpc3Q6IFtdLFxuICAgIHNwZWVkOjMwLFxuICAgIGNvbG9yOicjODA3QzdDJyxcbiAgICBwYWdlOiAxLFxuICAgIGxpc3Q6W10sXG4gICAgbG9hZDogXCLkuIrmi4nliqDovb3mm7TlpJpcIixcbiAgICBjYW5JVXNlT3BlbkRhdGE6IHd4LmNhbklVc2UoJ29wZW4tZGF0YS50eXBlLnVzZXJBdmF0YXJVcmwnKSAmJiB3eC5jYW5JVXNlKCdvcGVuLWRhdGEudHlwZS51c2VyTmlja05hbWUnKSAvLyDlpoLpnIDlsJ3or5Xojrflj5bnlKjmiLfkv6Hmga/lj6/mlLnkuLpmYWxzZVxuICB9LFxuICAvLyDkuovku7blpITnkIblh73mlbBcbiAgYmluZFZpZXdUYXAoKSB7XG4gICAgd3gubmF2aWdhdGVUbyh7XG4gICAgICB1cmw6ICcuLi9sb2dzL2xvZ3MnLFxuICAgIH0pXG4gIH0sXG4gIG9uTG9hZCgpIHtcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgaWYgKHd4LmdldFVzZXJQcm9maWxlKSB7XG4gICAgICB0aGlzLnNldERhdGEoe1xuICAgICAgICBjYW5JVXNlR2V0VXNlclByb2ZpbGU6IHRydWVcbiAgICAgIH0pXG4gICAgfVxuICAgIGNvbmZpZygpO1xuICAgIHRoaXMubHVuYm8oKTtcbiAgICB0aGlzLmFsbCh0aGlzLmRhdGEucGFnZSk7XG4gIH0sXG4gIGdldFVzZXJQcm9maWxlKCkge1xuICAgIC8vIOaOqOiNkOS9v+eUqHd4LmdldFVzZXJQcm9maWxl6I635Y+W55So5oi35L+h5oGv77yM5byA5Y+R6ICF5q+P5qyh6YCa6L+H6K+l5o6l5Y+j6I635Y+W55So5oi35Liq5Lq65L+h5oGv5Z2H6ZyA55So5oi356Gu6K6k77yM5byA5Y+R6ICF5aal5ZaE5L+d566h55So5oi35b+r6YCf5aGr5YaZ55qE5aS05YOP5pi156ew77yM6YG/5YWN6YeN5aSN5by556qXXG4gICAgd3guZ2V0VXNlclByb2ZpbGUoe1xuICAgICAgZGVzYzogJ+WxleekuueUqOaIt+S/oeaBrycsIC8vIOWjsOaYjuiOt+WPlueUqOaIt+S4quS6uuS/oeaBr+WQjueahOeUqOmAlO+8jOWQjue7reS8muWxleekuuWcqOW8ueeql+S4re+8jOivt+iwqOaFjuWhq+WGmVxuICAgICAgc3VjY2VzczogKHJlcykgPT4ge1xuICAgICAgICBjb25zb2xlLmxvZyhyZXMpXG4gICAgICAgIHRoaXMuc2V0RGF0YSh7XG4gICAgICAgICAgdXNlckluZm86IHJlcy51c2VySW5mbyxcbiAgICAgICAgICBoYXNVc2VySW5mbzogdHJ1ZVxuICAgICAgICB9KVxuICAgICAgfVxuICAgIH0pXG4gIH0sXG4gIGdldFVzZXJJbmZvKGU6IGFueSkge1xuICAgIC8vIOS4jeaOqOiNkOS9v+eUqGdldFVzZXJJbmZv6I635Y+W55So5oi35L+h5oGv77yM6aKE6K6h6IeqMjAyMeW5tDTmnIgxM+aXpei1t++8jGdldFVzZXJJbmZv5bCG5LiN5YaN5by55Ye65by556qX77yM5bm255u05o6l6L+U5Zue5Yy/5ZCN55qE55So5oi35Liq5Lq65L+h5oGvXG4gICAgY29uc29sZS5sb2coZSlcbiAgICB0aGlzLnNldERhdGEoe1xuICAgICAgdXNlckluZm86IGUuZGV0YWlsLnVzZXJJbmZvLFxuICAgICAgaGFzVXNlckluZm86IHRydWVcbiAgICB9KVxuICB9LFxuICBsdW5ibzpmdW5jdGlvbiAoKXtcbiAgICBjb25zdCByb290ID0gdGhpcztcbiAgICBnZXQoXCJsdW5ib1wiLHJlc3BvbnNlID0+IHtcbiAgICAgIHJvb3Quc2V0RGF0YSh7XG4gICAgICAgIGx1bmJvTGlzdDogcmVzcG9uc2UuZGF0YSxcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9LFxuICBhbGw6ZnVuY3Rpb24gKHBhZ2U6IG51bWJlcil7XG4gICAgY29uc3Qgcm9vdCA9IHRoaXM7XG4gICAgcG9zdChcImFsbFwiLHtwYWdlfSxyZXNwb25zZSA9PiB7XG4gICAgICBjb25zb2xlLmxvZyhcImFsbFwiLHJlc3BvbnNlLmRhdGEpO1xuICAgICAgaWYocGFnZT09PTEpe1xuICAgICAgICByb290LnNldERhdGEoe1xuICAgICAgICAgIGxpc3Q6IHJlc3BvbnNlLmRhdGEsXG4gICAgICAgICAgcGFnZTogcm9vdC5kYXRhLnBhZ2UrMSxcbiAgICAgICAgICBsb2FkOnJlc3BvbnNlLmRhdGEubGVuZ3RoPjA/J+S4iuaLieWKoOi9veabtOWkmic6J35+wrfmiJHmmK/mnInlupXnur/nmoTkurrCt35+J1xuICAgICAgICB9KTtcbiAgICAgIH1lbHNle1xuICAgICAgICByb290LnNldERhdGEoe1xuICAgICAgICAgIGxpc3Q6IHJvb3QuZGF0YS5saXN0LmNvbmNhdChyZXNwb25zZS5kYXRhKSxcbiAgICAgICAgICBwYWdlOiByb290LmRhdGEucGFnZSsxLFxuICAgICAgICAgIGxvYWQ6cmVzcG9uc2UuZGF0YS5sZW5ndGg+MD8n5LiK5ouJ5Yqg6L295pu05aSaJzonfn7Ct+aIkeaYr+acieW6lee6v+eahOS6usK3fn4nXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9LFxuICBvblJlYWNoQm90dG9tOmZ1bmN0aW9uICgpe1xuICAgIHRoaXMuYWxsKHRoaXMuZGF0YS5wYWdlKTtcbiAgfSxcbiAgXG4gIG9wZW5XaW46IGZ1bmN0aW9uKGU6e2N1cnJlbnRUYXJnZXQ6e2RhdGFzZXQ6e2lkOiBudW1iZXIsdGl0bGU6IHN0cmluZ319fSkge1xuICAgIHd4Lm5hdmlnYXRlVG8oe1xuICAgICAgdXJsOiBcIi9wYWdlcy9kZXRhaWxzL2RldGFpbHM/dGlkPVwiICsgZS5jdXJyZW50VGFyZ2V0LmRhdGFzZXQuaWQgKyBcIiZ0aXRsZT1cIiArIGUuY3VycmVudFRhcmdldC5kYXRhc2V0LnRpdGxlXG4gICAgfSk7XG4gIH0sXG59KVxuIl19